% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detect.r
\name{str_like}
\alias{str_like}
\title{Detect the presence of a pattern in the string using SQL like convention.}
\usage{
str_like(string, pattern, negate = FALSE, ignore_case = TRUE)
}
\arguments{
\item{string}{Input vector. Either a character vector, or something
coercible to one.}

\item{pattern}{Pattern to look for.

The default interpretation is a regular expression, as described
in \link[stringi:stringi-search-regex]{stringi::stringi-search-regex}. Control options with
\code{\link[=regex]{regex()}}.

Match a fixed string (i.e. by comparing only bytes), using
\code{\link[=fixed]{fixed()}}. This is fast, but approximate. Generally,
for matching human text, you'll want \code{\link[=coll]{coll()}} which
respects character matching rules for the specified locale.

Match character, word, line and sentence boundaries with
\code{\link[=boundary]{boundary()}}. An empty pattern, "", is equivalent to
\code{boundary("character")}.}

\item{negate}{If \code{TRUE}, return non-matching elements.}

\item{ignore_case}{Define if the case should be ignored.
Defaults to \code{TRUE} to match the SQL LIKE definition.}
}
\value{
A logical vector.
}
\description{
Vectorised over \code{string} and \code{pattern}.
Follows the structure of SQL's LIKE function and allows the use of their
wild cards \code{\%} or \code{_}.
These can be escaped using \code{\\\\} or \code{[]}.
}
\examples{
fruit <- c("apple", "banana", "pear", "pinapple")
str_like(fruit, "app\%")
str_like(fruit, "ba_ana")
str_like(fruit, "\%APPLE")
}
